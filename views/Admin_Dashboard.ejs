<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Admin Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
 * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
  overflow: hidden;
}

body {
  font-family: 'Poppins', sans-serif;
  background: linear-gradient(to right, #fceabb, #f8b500);
  display: flex;
}

/* Sidebar */
.sidebar {
  width: 250px;
  background-color: #fff5e6;
  padding: 40px 20px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.sidebar h2 {
  color: #333;
  font-size: 22px;
  text-align: center;
  margin-bottom: 20px;
}

/* Modern Button Style (from profile page look) */
.admin-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  padding: 14px;
  font-size: 16px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
  color: white;
  transition: all 0.3s ease-in-out;
  text-align: center;
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  font-family: 'Poppins', sans-serif;
  
}

.admin-btn i {
  font-size: 18px;
 
}

/* Button colors */
.lease-btn { background: linear-gradient(135deg, #007bff, #0056b3); }
.nonlease-btn { background: linear-gradient(135deg, #28a745, #1e7e34); }

/* Hover effects */
.admin-btn:hover {
  transform: scale(1.05);
  box-shadow: 0 6px 12px rgba(0,0,0,0.25);
}

/* Main content */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow: hidden;
}

/* Top bar fixed */
.top-bar {
  flex-shrink: 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 40px;
  background: rgba(255, 255, 255, 0.5);
  backdrop-filter: blur(5px);
}

.admin-info {
  display: flex;
  align-items: center;
  gap: 15px;
  background-color: #fff;
  padding: 10px 20px;
  border-radius: 30px;
}

.admin-info i {
  font-size: 24px;
  color: #f8b500;
}

.admin-name {
  font-size: 18px;
  font-weight: bold;
  color: #444;
}

.logout-btn {
  background-color: #dc3545;
  color: white;
  border: none;
  font-family: 'Poppins', sans-serif;
  border-radius: 20px;
  padding: 6px 14px;
  font-size: 18px;
  margin-left: 10px;
  cursor: pointer;
}

.logout-btn:hover {
  background-color: #c82333;
}

.main-content h1 {
  font-size: 32px;
  color: #333;
}

/* Table container */
#driverDataContainer {
  flex: 1;
  padding: 10px 40px 20px 40px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

#driverDataContainer .table-wrapper {
  flex: 1;
  overflow-x: auto;
  overflow-y: auto;
  border: 1px solid #ddd;
}

#driverDataContainer table {
  border-collapse: collapse;
  min-width: 1600px;
}

#driverDataContainer th,
#driverDataContainer td {
  padding: 10px;
  text-align: left;
  white-space: nowrap;
}
  </style>
<script>window.history.forward();</script>
</script>
</head>
<body>

  <div class="sidebar">
    <h2>Driver Records</h2>
    <button class="admin-btn lease-btn" onclick="loadDrivers('lease')">
      <i class="fas fa-car-side"></i> Lease Cars
    </button>
    <button class="admin-btn nonlease-btn" onclick="loadDrivers('nonlease')">
      <i class="fas fa-car"></i> Non-Lease Cars
    </button>
    <button class="admin-btn lease-btn" onclick="loadDrivers('total_os')">
      <i class="fas fa-database"></i> Total OS
    </button>
    <button class="admin-btn nonlease-btn" onclick="loadDrivers('daily_accounts')">
      <i class="fas fa-calendar-day"></i> Daily Accounts
    </button>
    <button class="admin-btn lease-btn" onclick="loadDrivers('weekly_accounts')">
      <i class="fas fa-calendar-week"></i> Weekly Accounts
    </button>
    <button class="admin-btn nonlease-btn" onclick="loadDrivers('driver_ids')">
      <i class="fas fa-id-card"></i> Driver IDs
    </button>
    <button class="admin-btn lease-btn" onclick="loadDrivers('Car-history')">
      <i class="fas fa-history"></i> Car History
    </button>
  </div>

  <div class="main-content">
    <div class="top-bar">
      <h1>ðŸš€ Welcome to Admin Dashboard</h1>
      <div class="admin-info">
        <i class="fas fa-user-shield"></i>
        <span class="admin-name"><%= username %></span>
        <form action="/logout" method="POST">
          <button type="submit" class="logout-btn">Logout</button>
        </form>
      </div>
    </div>

    <!-- Driver data will appear here -->
    <div id="driverDataContainer">
      
    </div>
  </div>

<script>
function loadDrivers(type) {
document.getElementById('driverDataContainer').innerHTML = `
  <p style="
    font-size: 32px;
    font-weight: 800;
    text-align: center;
    margin-top: 60px;
    background: linear-gradient(90deg, #007bff, #00c6ff, #ff6ec7);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 2px 2px 8px rgba(0,0,0,0.2);
    animation: fadeIn 1s ease-in-out;
  ">
    Loading data...
  </p>
  <style>
    @keyframes fadeIn {
      0% { opacity: 0; transform: translateY(-15px); }
      100% { opacity: 1; transform: translateY(0); }
    }
  </style>
`;


  let url;

  switch(type) {
    case 'lease': url = '/leased-drivers'; break;
    case 'nonlease': url = '/non-leased-drivers'; break;
    case 'total_os': url = '/Total_os'; break;
    case 'daily_accounts': url = '/Daily_accounts'; break;
    case 'weekly_accounts': url = '/Weekly_Accounts'; break;
    case 'driver_ids': url = '/Driver_ids'; break;
    case 'Car-history': url = '/Car_History'; break;
    default:
      document.getElementById('driverDataContainer').innerHTML = "<p style='color:red;'>Invalid option.</p>";
      return;
  }

  fetch(url)
    .then(res => res.text())
    .then(html => {
      document.getElementById('driverDataContainer').innerHTML = html;
      if (type === 'total_os') {
        activateSearchAndSort();
      }
      if(type === 'lease'){
        activateSearchAndSort1();
      }
      if(type === 'nonlease'){
        activateSearchAndSort2();
      }
      if(type === 'daily_accounts'){
        activateSearchAndSort3();
      }
      if(type === 'weekly_accounts'){
        activateSearchAndSort4();
      }
      if(type === 'driver_ids'){
        activateSearchAndSort5();
      }
      if(type==='Car-history'){
        activateSearchAndSort6();
      }
    })
    .catch(err => {
      console.error(err);
      document.getElementById('driverDataContainer').innerHTML = "<p style='color:red;'>Failed to load data.</p>";
    });
}


//total os sort and searching code
function activateSearchAndSort() {
  console.log("âœ… Search + Sort script activated");

  const searchInput = document.getElementById("searchInput");
  const sortSelect = document.getElementById("sortSelect");
  const tableBody = document.getElementById("tableBody");

  if (!searchInput || !sortSelect || !tableBody) return;

  let allRows = Array.from(tableBody.querySelectorAll("tr"));

  function renderRows(rows) {
    tableBody.innerHTML = "";
    rows.forEach(row => tableBody.appendChild(row));
  }

  function applyFilters() {
    let filter = searchInput.value.toLowerCase();
    let sortType = sortSelect.value;

    let filteredRows = allRows.filter(row => {
      let rowText = row.textContent.toLowerCase();

      // Reset highlights first
      row.querySelectorAll("td").forEach(td => {
        td.innerHTML = td.textContent;
      });

      // Highlight only the matched word(s)
      if (filter && rowText.includes(filter)) {
        row.querySelectorAll("td").forEach(td => {
          let text = td.textContent;
          td.innerHTML = text.replace(
            new RegExp(`(${filter})`, "gi"),
            `<span style="background: yellow; font-weight: bold;">$1</span>`
          );
        });
      }

      return rowText.includes(filter) || !filter;
    });

    // Sorting
    filteredRows.sort((a, b) => {
      let agdA = a.cells[3]?.innerText.trim();
      let agdB = b.cells[3]?.innerText.trim();

      let numA = agdA ? parseInt(agdA.split('_').pop()) : 0;
      let numB = agdB ? parseInt(agdB.split('_').pop()) : 0;

      let nameA = a.cells[2]?.innerText.trim().toLowerCase();
      let nameB = b.cells[2]?.innerText.trim().toLowerCase();

      if (sortType === "agdAsc") return numA - numB;
      if (sortType === "agdDesc") return numB - numA;
      if (sortType === "nameAsc") return nameA.localeCompare(nameB);
      if (sortType === "nameDesc") return nameB.localeCompare(nameA);
      return 0;
    });

    // Render filtered rows
    tableBody.innerHTML = "";
    if (filteredRows.length > 0) {
      filteredRows.forEach(row => tableBody.appendChild(row));
    } else {
      let noMatchRow = document.createElement("tr");
      let td = document.createElement("td");
      td.colSpan = tableBody.closest("table").rows[0].cells.length;
      td.style.textAlign = "center";
      td.style.color = "black";
      td.textContent = "No match found";
      noMatchRow.appendChild(td);
      tableBody.appendChild(noMatchRow);
    }
  }

  searchInput.addEventListener("keyup", applyFilters);
  sortSelect.addEventListener("change", applyFilters);
}
// lease sorts and searching code
function activateSearchAndSort1() {
      console.log("âœ… Search + Sort script activated");

      const searchInput = document.getElementById("searchInput");
      const sortSelect = document.getElementById("sortSelect");
      const tableBody = document.getElementById("tableBody");

      if (!searchInput || !sortSelect || !tableBody) return;

      // Store rows in memory
      let allRows = Array.from(tableBody.querySelectorAll("tr")).map(row => ({
        element: row,
        username: row.cells[1]?.innerText.trim().toLowerCase(),
        vehicle: row.cells[2]?.innerText.trim().toLowerCase()
      }));

      // Highlight helper
      function highlightText(cell, filter) {
        if (!filter) return;
        const text = cell.textContent;
        const regex = new RegExp(`(${filter})`, "gi");
        const newHTML = text.replace(regex, `<span style="background: yellow; font-weight: bold;">$1</span>`);
        cell.innerHTML = newHTML;
      }

      function renderRows(rows, filter) {
        tableBody.innerHTML = "";
        if (rows.length > 0) {
          rows.forEach(r => {
            const clonedRow = r.element.cloneNode(true);
            if (filter) {
              Array.from(clonedRow.cells).forEach((cell, i) => {
                if (i > 0 && i < 3) highlightText(cell, filter); // Only Username + Vehicle
              });
            }
            tableBody.appendChild(clonedRow);
          });
        } else {
          let noMatchRow = document.createElement("tr");
          let td = document.createElement("td");
          td.colSpan = 4;
          td.style.textAlign = "center";
          td.textContent = "No match found";
          noMatchRow.appendChild(td);
          tableBody.appendChild(noMatchRow);
        }
      }

      function applyFilters() {
        let filter = searchInput.value.toLowerCase();
        let sortType = sortSelect.value;

        let filtered = allRows.filter(r =>
          !filter || r.username.includes(filter) || r.vehicle.includes(filter)
        );

        // Sorting
        filtered.sort((a, b) => {
          if (sortType === "nameAsc") return a.username.localeCompare(b.username);
          if (sortType === "nameDesc") return b.username.localeCompare(a.username);
          if (sortType === "vehicleAsc") return a.vehicle.localeCompare(b.vehicle, undefined, { numeric: true });
          if (sortType === "vehicleDesc") return b.vehicle.localeCompare(a.vehicle, undefined, { numeric: true });
          return 0;
        });

        renderRows(filtered, filter);
      }

      searchInput.addEventListener("keyup", applyFilters);
      sortSelect.addEventListener("change", applyFilters);
    }


// nonlease sorts and seraching code
function activateSearchAndSort2() {
      console.log("âœ… Search + Sort script activated");

      const searchInput = document.getElementById("searchInput");
      const sortSelect = document.getElementById("sortSelect");
      const tableBody = document.getElementById("tableBody");

      if (!searchInput || !sortSelect || !tableBody) return;

      // Store rows in memory
      let allRows = Array.from(tableBody.querySelectorAll("tr")).map(row => ({
        element: row,
        username: row.cells[1]?.innerText.trim().toLowerCase(),
        vehicle: row.cells[2]?.innerText.trim().toLowerCase()
      }));

      // Highlight helper
      function highlightText(cell, filter) {
        if (!filter) return;
        const text = cell.textContent;
        const regex = new RegExp(`(${filter})`, "gi");
        const newHTML = text.replace(regex, `<span style="background: yellow; font-weight: bold;">$1</span>`);
        cell.innerHTML = newHTML;
      }

      function renderRows(rows, filter) {
        tableBody.innerHTML = "";
        if (rows.length > 0) {
          rows.forEach(r => {
            const clonedRow = r.element.cloneNode(true);
            if (filter) {
              Array.from(clonedRow.cells).forEach((cell, i) => {
                if (i > 0 && i < 3) highlightText(cell, filter); // Only Username + Vehicle
              });
            }
            tableBody.appendChild(clonedRow);
          });
        } else {
          let noMatchRow = document.createElement("tr");
          let td = document.createElement("td");
          td.colSpan = 4;
          td.style.textAlign = "center";
          td.textContent = "No match found";
          noMatchRow.appendChild(td);
          tableBody.appendChild(noMatchRow);
        }
      }

      function applyFilters() {
        let filter = searchInput.value.toLowerCase();
        let sortType = sortSelect.value;

        let filtered = allRows.filter(r =>
          !filter || r.username.includes(filter) || r.vehicle.includes(filter)
        );

        // Sorting
        filtered.sort((a, b) => {
          if (sortType === "nameAsc") return a.username.localeCompare(b.username);
          if (sortType === "nameDesc") return b.username.localeCompare(a.username);
          if (sortType === "vehicleAsc") return a.vehicle.localeCompare(b.vehicle, undefined, { numeric: true });
          if (sortType === "vehicleDesc") return b.vehicle.localeCompare(a.vehicle, undefined, { numeric: true });
          return 0;
        });

        renderRows(filtered, filter);
      }

      searchInput.addEventListener("keyup", applyFilters);
      sortSelect.addEventListener("change", applyFilters);
    }
  

// daily accounts sorts and searching code
function activateSearchAndSort3() {
  console.log("âœ… Search + Sort script activated for Daily Accounts");

  const searchInput = document.getElementById("searchInput");
  const sortSelect = document.getElementById("sortSelect");
  const tableBody = document.getElementById("tableBody");

  if (!searchInput || !sortSelect || !tableBody) return;

  // Store rows in memory
  let allRows = Array.from(tableBody.querySelectorAll("tr")).map(row => ({
    element: row,
    agd: row.cells[0]?.innerText.trim().toLowerCase(),
    driver: row.cells[1]?.innerText.trim().toLowerCase(),
    date: row.cells[3]?.innerText.trim()
  }));

  // Highlight helper
  function highlightText(cell, filter) {
    if (!filter) return;
    const text = cell.textContent;
    const regex = new RegExp(`(${filter})`, "gi");
    const newHTML = text.replace(regex, `<span style="background: yellow; font-weight: bold;">$1</span>`);
    cell.innerHTML = newHTML;
  }

  function renderRows(rows, filter) {
    tableBody.innerHTML = "";
    if (rows.length > 0) {
      rows.forEach(r => {
        const clonedRow = r.element.cloneNode(true);
        if (filter) {
          Array.from(clonedRow.cells).forEach((cell, i) => {
            // Highlight AGD ID, Driver Name, and Date only
            if ([0, 1, 3].includes(i)) highlightText(cell, filter);
          });
        }
        tableBody.appendChild(clonedRow);
      });
    } else {
      let noMatchRow = document.createElement("tr");
      let td = document.createElement("td");
      td.colSpan = allRows[0].element.cells.length;
      td.style.textAlign = "center";
      td.textContent = "No match found";
      noMatchRow.appendChild(td);
      tableBody.appendChild(noMatchRow);
    }
  }

 function applyFilters() {
  let filter = searchInput.value.toLowerCase();
  let sortType = sortSelect.value;

  let filtered = allRows.filter(r =>
    !filter ||
    r.agd.includes(filter) ||
    r.driver.includes(filter) ||
    r.date.toLowerCase().includes(filter)
  );

  // âœ… Custom parser for DD-MM-YYYY
  function parseDate(dateStr) {
    if (!dateStr) return new Date(0); // fallback to very old date
    let [day, month, year] = dateStr.split("-").map(Number);
    return new Date(year, month - 1, day); // month is 0-based
  }

  // Sorting
  filtered.sort((a, b) => {
    if (sortType === "agdAsc") return parseInt(a.agd) - parseInt(b.agd);
    if (sortType === "agdDesc") return parseInt(b.agd) - parseInt(a.agd);
    if (sortType === "nameAsc") return a.driver.localeCompare(b.driver);
    if (sortType === "nameDesc") return b.driver.localeCompare(a.driver);
    if (sortType === "dateAsc") return parseDate(a.date) - parseDate(b.date);
    if (sortType === "dateDesc") return parseDate(b.date) - parseDate(a.date);
    return 0;
  });

  renderRows(filtered, filter);
}


  searchInput.addEventListener("keyup", applyFilters);
  sortSelect.addEventListener("change", applyFilters);
}

// weekly account sort and searching code

function activateSearchAndSort4() {
  console.log("âœ… Search + Sort script activated for Weekly Accounts");

  const searchInput = document.getElementById("searchInput");
  const sortSelect = document.getElementById("sortSelect");
  const tableBody = document.getElementById("tableBody");
  const table = document.getElementById("weeklyTable");

  if (!searchInput || !sortSelect || !tableBody || !table) return;

  let allRows = Array.from(tableBody.querySelectorAll("tr"));

  function parseDate(dateStr) {
    // Accepts both dd-mm-yyyy with or without leading zero
    if (!dateStr) return null;
    let parts = dateStr.split("-");
    if (parts.length !== 3) return null;

    let day = parseInt(parts[0], 10);   // 01 â†’ 1
    let month = parseInt(parts[1], 10) - 1; // 01 â†’ 0 (JS months are 0-based)
    let year = parseInt(parts[2], 10);

    if (isNaN(day) || isNaN(month) || isNaN(year)) return null;
    return new Date(year, month, day);
  }

  function applyFilters() {
    let filter = searchInput.value.toLowerCase();
    let sortType = sortSelect.value;

    let filteredRows = allRows.filter(row => {
      let rowText = row.textContent.toLowerCase();

      // Reset highlights first
      row.querySelectorAll("td").forEach(td => {
        td.innerHTML = td.textContent;
      });

      // Highlight only the matched word(s)
      if (filter && rowText.includes(filter)) {
        row.querySelectorAll("td").forEach(td => {
          let text = td.textContent;
          td.innerHTML = text.replace(
            new RegExp(`(${filter})`, "gi"),
            `<span style="background: yellow; font-weight: bold;">$1</span>`
          );
        });
      }

      return rowText.includes(filter) || !filter;
    });

    // âœ… Sorting logic
    filteredRows.sort((a, b) => {
      let agdA = a.cells[0]?.innerText.trim();
      let agdB = b.cells[0]?.innerText.trim();

      let numA = parseInt(agdA) || 0;
      let numB = parseInt(agdB) || 0;

      let nameA = a.cells[1]?.innerText.trim().toLowerCase();
      let nameB = b.cells[1]?.innerText.trim().toLowerCase();

      let weekStartA = parseDate(a.cells[2]?.innerText.trim());
      let weekStartB = parseDate(b.cells[2]?.innerText.trim());

      let weekEndA = parseDate(a.cells[3]?.innerText.trim());
      let weekEndB = parseDate(b.cells[3]?.innerText.trim());

      let cashA = parseFloat(a.cells[4]?.innerText.trim()) || 0;
      let cashB = parseFloat(b.cells[4]?.innerText.trim()) || 0;

      let loginA = parseFloat(a.cells[5]?.innerText.trim()) || 0;
      let loginB = parseFloat(b.cells[5]?.innerText.trim()) || 0;

      let tollA = parseFloat(a.cells[6]?.innerText.trim()) || 0;
      let tollB = parseFloat(b.cells[6]?.innerText.trim()) || 0;

      let cngA = parseFloat(a.cells[7]?.innerText.trim()) || 0;
      let cngB = parseFloat(b.cells[7]?.innerText.trim()) || 0;

      // âœ… New sorts
      if (sortType === "weekStartAsc") return weekStartA - weekStartB;
      if (sortType === "weekStartDesc") return weekStartB - weekStartA;
      if (sortType === "weekEndAsc") return weekEndA - weekEndB;
      if (sortType === "weekEndDesc") return weekEndB - weekEndA;
      if (sortType === "cashAsc") return cashA - cashB;
      if (sortType === "cashDesc") return cashB - cashA;
      if (sortType === "loginAsc") return loginA - loginB;
      if (sortType === "loginDesc") return loginB - loginA;
      if (sortType === "tollAsc") return tollA - tollB;
      if (sortType === "tollDesc") return tollB - tollA;
      if (sortType === "cngAsc") return cngA - cngB;
      if (sortType === "cngDesc") return cngB - cngA;

      return 0;
    });

    // Render filtered rows
    tableBody.innerHTML = "";
    if (filteredRows.length > 0) {
      filteredRows.forEach(row => tableBody.appendChild(row));
    } else {
      let noMatchRow = document.createElement("tr");
      let td = document.createElement("td");
      td.colSpan = allRows[0].cells.length;
      td.style.textAlign = "center";
      td.style.color = "black";
      td.textContent = "No match found";
      noMatchRow.appendChild(td);
      tableBody.appendChild(noMatchRow);
    }
  }

  searchInput.addEventListener("keyup", applyFilters);
  sortSelect.addEventListener("change", applyFilters);
}


// driver ids sort and searching codes
function activateSearchAndSort5() {
  console.log("âœ… Search + Sort script activated for Driver IDs");

  const searchInput = document.getElementById("searchInput");
  const sortSelect = document.getElementById("sortSelect");
  const tableBody = document.getElementById("tableBody");

  if (!searchInput || !sortSelect || !tableBody) return;

  let allRows = Array.from(tableBody.querySelectorAll("tr"));

  function applyFilters() {
    let filter = searchInput.value.toLowerCase();
    let sortType = sortSelect.value;

    let filteredRows = allRows.filter(row => {
      let rowText = row.textContent.toLowerCase();

      // Reset highlights
      row.querySelectorAll("td").forEach(td => {
        td.innerHTML = td.textContent;
      });

      // Highlight matches
      if (filter && rowText.includes(filter)) {
        row.querySelectorAll("td").forEach(td => {
          let text = td.textContent;
          td.innerHTML = text.replace(
            new RegExp(`(${filter})`, "gi"),
            `<span style="background: yellow; font-weight: bold;">$1</span>`
          );
        });
      }

      return rowText.includes(filter) || !filter;
    });

    // âœ… Sorting logic (AGD ID last 2 digits + Age)
    filteredRows.sort((a, b) => {
      let agdA = a.cells[3]?.innerText.trim() || "";
      let agdB = b.cells[3]?.innerText.trim() || "";

      // Extract last 2 digits only (ignores leading zeros)
      let numA = parseInt(agdA.slice(-2).replace(/^0+/, "")) || 0;
      let numB = parseInt(agdB.slice(-2).replace(/^0+/, "")) || 0;

      // Age column (index 15)
      let ageA = parseInt(a.cells[15]?.innerText.trim()) || 0;
      let ageB = parseInt(b.cells[15]?.innerText.trim()) || 0;

      if (sortType === "agdAsc") return numA - numB;
      if (sortType === "agdDesc") return numB - numA;
      if (sortType === "ageAsc") return ageA - ageB;
      if (sortType === "ageDesc") return ageB - ageA;
      return 0;
    });

    // Render
    tableBody.innerHTML = "";
    if (filteredRows.length > 0) {
      filteredRows.forEach(row => tableBody.appendChild(row));
    } else {
      let noMatchRow = document.createElement("tr");
      let td = document.createElement("td");
      td.colSpan = allRows[0].cells.length;
      td.style.textAlign = "center";
      td.textContent = "No match found";
      noMatchRow.appendChild(td);
      tableBody.appendChild(noMatchRow);
    }
  }

  searchInput.addEventListener("keyup", applyFilters);
  sortSelect.addEventListener("change", applyFilters);
}


// car history sort and searching code
function activateSearchAndSort6() {
  console.log("âœ… Search + Sort script activated for Car History");

  const searchInput = document.getElementById("searchInput");
  const sortSelect = document.getElementById("sortSelect");
  const tableBody = document.getElementById("tableBody");

  if (!searchInput || !sortSelect || !tableBody) return;

  let allRows = Array.from(tableBody.querySelectorAll("tr"));

  // Parse dates in DD-MM-YYYY or D-M-YYYY formats
  function parseDate(dateStr) {
    if (!dateStr) return new Date(0);
    const parts = dateStr.trim().split("-");
    if (parts.length !== 3) return new Date(0);

    let day, month, year;

    if (parts[2].length === 4) { // DD-MM-YYYY
      day = parseInt(parts[0], 10);
      month = parseInt(parts[1], 10) - 1;
      year = parseInt(parts[2], 10);
    } else if (parts[0].length === 2) { // YY-MM-DD
      year = 2000 + parseInt(parts[0], 10);
      month = parseInt(parts[1], 10) - 1;
      day = parseInt(parts[2], 10);
    } else {
      return new Date(0);
    }

    return new Date(year, month, day);
  }

  function applyFilters() {
    const filter = searchInput.value.toLowerCase();
    const sortType = sortSelect.value;

    let filteredRows = allRows.filter(row => {
      const rowText = row.textContent.toLowerCase();

      // Reset highlights only in text cells (preserve images)
      row.querySelectorAll("td").forEach(td => {
        if (!td.querySelector("img")) td.innerHTML = td.textContent;
      });

      // Highlight matches only in text cells
      if (filter && rowText.includes(filter)) {
        row.querySelectorAll("td").forEach(td => {
          if (!td.querySelector("img")) {
            td.innerHTML = td.textContent.replace(
              new RegExp(`(${filter})`, "gi"),
              `<span style="background: yellow; font-weight: bold;">$1</span>`
            );
          }
        });
      }

      return rowText.includes(filter) || !filter;
    });

    // Sorting logic
    filteredRows.sort((a, b) => {
      const nameA = a.cells[5]?.innerText.trim().toLowerCase() || "";
      const nameB = b.cells[5]?.innerText.trim().toLowerCase() || "";

      const dateFromA = parseDate(a.cells[7]?.innerText.trim());
      const dateFromB = parseDate(b.cells[7]?.innerText.trim());

      const dateToA = parseDate(a.cells[8]?.innerText.trim());
      const dateToB = parseDate(b.cells[8]?.innerText.trim());

      switch (sortType) {
        case "nameAsc": return nameA.localeCompare(nameB);
        case "nameDesc": return nameB.localeCompare(nameA);
        case "dateFromAsc": return dateFromA - dateFromB;
        case "dateFromDesc": return dateFromB - dateFromA;
        case "dateToAsc": return dateToA - dateToB;
        case "dateToDesc": return dateToB - dateToA;
        default: return 0;
      }
    });

    // Render filtered rows
    tableBody.innerHTML = "";
    if (filteredRows.length > 0) {
      filteredRows.forEach(row => tableBody.appendChild(row));
    } else {
      const noMatchRow = document.createElement("tr");
      const td = document.createElement("td");
      td.colSpan = allRows[0].cells.length;
      td.style.textAlign = "center";
      td.textContent = "No match found";
      noMatchRow.appendChild(td);
      tableBody.appendChild(noMatchRow);
    }

    // Scroll first highlighted row to top
    const firstHighlight = tableBody.querySelector("span[style*='background: yellow']");
    if (firstHighlight) firstHighlight.closest("tr").scrollIntoView({ behavior: "smooth", block: "start" });
  }

  searchInput.addEventListener("keyup", applyFilters);
  sortSelect.addEventListener("change", applyFilters);
}


</script>
<script>
  window.addEventListener("pageshow", function (event) {
    if (event.persisted || performance.getEntriesByType("navigation")[0].type === "back_forward") {
      // Force reload from server instead of showing cached page
      window.location.reload();
    }
  });
</script>
<script>
  // Auto-load section based on query param
window.addEventListener('DOMContentLoaded', () => {
  const urlParams = new URLSearchParams(window.location.search);
  const loadType = urlParams.get('load'); // e.g., "lease"

  if (loadType) {
    loadDrivers(loadType); // triggers your existing function
  }
});
</script>

</body>
</html>
